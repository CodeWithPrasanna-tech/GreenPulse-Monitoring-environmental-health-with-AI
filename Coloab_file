{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPU0CPn0h8Jhe8aMwAmwFNj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["In this notebook, we will explore and preprocess three datasets related to pollution:\n","\n","1. **Air Quality Dataset**: This dataset contains information about various air quality parameters such as PM2.5, PM10, NO2, CO, and Ozone, along with meteorological factors like temperature and humidity.\n","2. **Soil Pollution Dataset**: It includes data on soil contaminants such as Nitrogen, Phosphorus, and Potassium levels, along with the pH and presence of heavy metals.\n","3. **Water Pollution Dataset**: This dataset provides information on the level of water contamination, treatment methods, and the population affected.\n","\n","We will clean and preprocess these datasets, detect outliers, handle missing values, scale features, and apply machine learning models.\n"],"metadata":{"id":"Tr95CDsnn8Wn"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fn0UcA17kwU2","executionInfo":{"status":"ok","timestamp":1756612744782,"user_tz":-330,"elapsed":28621,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"34b6f067-249d-4d97-8855-8f5ecc833f42"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"qTiFztxclQW4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We will begin by loading the three pollution datasets from the specified location on Google Drive. After loading the data, we will inspect the first few rows to get a sense of the structure and content of each dataset.\n","\n","Let’s load and preview the data.\n"],"metadata":{"id":"B_wTeiTZoMM1"}},{"cell_type":"code","source":["# Path to the dataset folder (Google Drive)\n","dataset_folder_path = '/content/drive/MyDrive/WEEK 1/dataset'\n","output_folder_path = '/content/drive/MyDrive/WEEK 1/dataset_split'\n","\n","# Load the datasets\n","air_quality_df = pd.read_csv(f'{dataset_folder_path}/air-quality-india.csv')\n","soil_pollution_df = pd.read_csv(f'{dataset_folder_path}/soil_pollution_diseases.csv')\n","water_pollution_df = pd.read_csv(f'{dataset_folder_path}/water_pollution_disease.csv')\n","\n","# Show the first few rows of each dataset\n","print(\"Air Quality Data:\")\n","print(air_quality_df.head())\n","\n","print(\"\\nSoil Pollution Data:\")\n","print(soil_pollution_df.head())\n","\n","print(\"\\nWater Pollution Data:\")\n","print(water_pollution_df.head())\n","\n","# -------------------------- Dataset Summary Table --------------------------\n","\n","# Air Quality Data Summary\n","print(\"\\nAir Quality Dataset Summary:\")\n","print(air_quality_df.info())\n","print(\"\\nAir Quality Dataset Descriptive Statistics:\")\n","print(air_quality_df.describe())\n","\n","# Soil Pollution Data Summary\n","print(\"\\nSoil Pollution Dataset Summary:\")\n","print(soil_pollution_df.info())\n","print(\"\\nSoil Pollution Dataset Descriptive Statistics:\")\n","print(soil_pollution_df.describe())\n","\n","# Water Pollution Data Summary\n","print(\"\\nWater Pollution Dataset Summary:\")\n","print(water_pollution_df.info())\n","print(\"\\nWater Pollution Dataset Descriptive Statistics:\")\n","print(water_pollution_df.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JxnbbrXJlYzN","executionInfo":{"status":"ok","timestamp":1756612747224,"user_tz":-330,"elapsed":2407,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"7167c15e-63e8-4a3c-9c78-5f4c888f9fde"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Air Quality Data:\n","             Timestamp  Year  Month  Day  Hour   PM2.5\n","0  2017-11-07 12:00:00  2017     11    7    12   64.51\n","1  2017-11-07 13:00:00  2017     11    7    13   69.95\n","2  2017-11-07 14:00:00  2017     11    7    14   92.79\n","3  2017-11-07 15:00:00  2017     11    7    15  109.66\n","4  2017-11-07 16:00:00  2017     11    7    16  116.50\n","\n","Soil Pollution Data:\n","       Case_ID Date_Reported  Region   Country Pollutant_Type  \\\n","0  CASE_100000    2024-09-12  Africa  Pakistan           Lead   \n","1  CASE_100001    2024-01-01  Africa   Germany           Lead   \n","2  CASE_100002    2025-02-24  Europe   Germany           Lead   \n","3  CASE_100003    2024-09-24    Asia       USA           Lead   \n","4  CASE_100004    2023-05-24  Africa     India       Chromium   \n","\n","   Pollutant_Concentration_mg_kg  Soil_pH  Temperature_C  Humidity_%  \\\n","0                          78.04     8.30           35.6        64.9   \n","1                          16.33     7.96           31.0        73.1   \n","2                         167.33     5.35           16.4        33.8   \n","3                          89.23     5.66           31.4        30.5   \n","4                          93.93     7.64           17.0        58.6   \n","\n","   Rainfall_mm  ... Soil_Texture Soil_Organic_Matter_%  \\\n","0         62.4  ...        Sandy                  1.98   \n","1          8.2  ...        Silty                  9.71   \n","2        121.7  ...         Clay                  5.49   \n","3        116.9  ...        Silty                  3.98   \n","4        237.0  ...        Loamy                  0.94   \n","\n","               Disease_Type Disease_Severity       Health_Symptoms  \\\n","0  Gastrointestinal Disease         Moderate  Breathing Difficulty   \n","1                    Cancer             Mild  Breathing Difficulty   \n","2  Gastrointestinal Disease           Severe                Nausea   \n","3     Neurological Disorder           Severe               Fatigue   \n","4              Skin Disease         Moderate  Breathing Difficulty   \n","\n","   Age_Group_Affected Gender_Most_Affected     Mitigation_Measure  \\\n","0              Adults                 Male  Government Regulation   \n","1             Elderly                 Both    Community Awareness   \n","2            Children                 Both       Soil Remediation   \n","3              Adults                 Male    Community Awareness   \n","4            Children               Female  Government Regulation   \n","\n","  Case_Resolved Follow_Up_Required  \n","0            No                Yes  \n","1           Yes                 No  \n","2           Yes                 No  \n","3           Yes                 No  \n","4           Yes                Yes  \n","\n","[5 rows x 24 columns]\n","\n","Water Pollution Data:\n","     Country   Region  Year Water Source Type  Contaminant Level (ppm)  \\\n","0     Mexico    North  2015              Lake                     6.06   \n","1     Brazil     West  2017              Well                     5.24   \n","2  Indonesia  Central  2022              Pond                     0.24   \n","3    Nigeria     East  2016              Well                     7.91   \n","4     Mexico    South  2005              Well                     0.12   \n","\n","   pH Level  Turbidity (NTU)  Dissolved Oxygen (mg/L)  Nitrate Level (mg/L)  \\\n","0      7.12             3.93                     4.28                  8.28   \n","1      7.84             4.79                     3.86                 15.74   \n","2      6.43             0.79                     3.42                 36.67   \n","3      6.71             1.96                     3.12                 36.92   \n","4      8.16             4.22                     9.15                 49.35   \n","\n","   Lead Concentration (µg/L)  ...  Cholera Cases per 100,000 people  \\\n","0                       7.89  ...                                33   \n","1                      14.68  ...                                27   \n","2                       9.96  ...                                39   \n","3                       6.77  ...                                33   \n","4                      12.51  ...                                31   \n","\n","  Typhoid Cases per 100,000 people  \\\n","0                               44   \n","1                                8   \n","2                               50   \n","3                               13   \n","4                               68   \n","\n","   Infant Mortality Rate (per 1,000 live births)  GDP per Capita (USD)  \\\n","0                                          76.16                 57057   \n","1                                          77.30                 17220   \n","2                                          48.45                 86022   \n","3                                          95.66                 31166   \n","4                                          58.78                 25661   \n","\n","   Healthcare Access Index (0-100)  Urbanization Rate (%)  \\\n","0                            96.92                  84.61   \n","1                            84.73                  73.37   \n","2                            58.37                  72.86   \n","3                            39.07                  71.07   \n","4                            23.03                  55.55   \n","\n","   Sanitation Coverage (% of Population)  Rainfall (mm per year)  \\\n","0                                  63.23                    2800   \n","1                                  29.12                    1572   \n","2                                  93.56                    2074   \n","3                                  94.25                     937   \n","4                                  69.23                    2295   \n","\n","   Temperature (°C)  Population Density (people per km²)  \n","0              4.94                                  593  \n","1             16.93                                  234  \n","2             21.73                                   57  \n","3              3.79                                  555  \n","4             31.44                                  414  \n","\n","[5 rows x 24 columns]\n","\n","Air Quality Dataset Summary:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 36192 entries, 0 to 36191\n","Data columns (total 6 columns):\n"," #   Column     Non-Null Count  Dtype  \n","---  ------     --------------  -----  \n"," 0   Timestamp  36192 non-null  object \n"," 1   Year       36192 non-null  int64  \n"," 2   Month      36192 non-null  int64  \n"," 3   Day        36192 non-null  int64  \n"," 4   Hour       36192 non-null  int64  \n"," 5   PM2.5      36192 non-null  float64\n","dtypes: float64(1), int64(4), object(1)\n","memory usage: 1.7+ MB\n","None\n","\n","Air Quality Dataset Descriptive Statistics:\n","               Year         Month           Day          Hour         PM2.5\n","count  36192.000000  36192.000000  36192.000000  36192.000000  36192.000000\n","mean    2019.682278      6.331841     15.716401     11.477840     49.308429\n","std        1.345011      3.593321      8.859769      6.925088     24.863511\n","min     2017.000000      1.000000      1.000000      0.000000      7.020000\n","25%     2019.000000      3.000000      8.000000      5.000000     28.080000\n","50%     2020.000000      6.000000     16.000000     11.000000     45.730000\n","75%     2021.000000     10.000000     23.000000     17.000000     64.520000\n","max     2022.000000     12.000000     31.000000     23.000000    245.630000\n","\n","Soil Pollution Dataset Summary:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3000 entries, 0 to 2999\n","Data columns (total 24 columns):\n"," #   Column                         Non-Null Count  Dtype  \n","---  ------                         --------------  -----  \n"," 0   Case_ID                        3000 non-null   object \n"," 1   Date_Reported                  3000 non-null   object \n"," 2   Region                         3000 non-null   object \n"," 3   Country                        3000 non-null   object \n"," 4   Pollutant_Type                 3000 non-null   object \n"," 5   Pollutant_Concentration_mg_kg  3000 non-null   float64\n"," 6   Soil_pH                        3000 non-null   float64\n"," 7   Temperature_C                  3000 non-null   float64\n"," 8   Humidity_%                     3000 non-null   float64\n"," 9   Rainfall_mm                    3000 non-null   float64\n"," 10  Crop_Type                      3000 non-null   object \n"," 11  Farming_Practice               3000 non-null   object \n"," 12  Nearby_Industry                2418 non-null   object \n"," 13  Water_Source_Type              3000 non-null   object \n"," 14  Soil_Texture                   3000 non-null   object \n"," 15  Soil_Organic_Matter_%          3000 non-null   float64\n"," 16  Disease_Type                   3000 non-null   object \n"," 17  Disease_Severity               3000 non-null   object \n"," 18  Health_Symptoms                3000 non-null   object \n"," 19  Age_Group_Affected             3000 non-null   object \n"," 20  Gender_Most_Affected           3000 non-null   object \n"," 21  Mitigation_Measure             3000 non-null   object \n"," 22  Case_Resolved                  3000 non-null   object \n"," 23  Follow_Up_Required             3000 non-null   object \n","dtypes: float64(6), object(18)\n","memory usage: 562.6+ KB\n","None\n","\n","Soil Pollution Dataset Descriptive Statistics:\n","       Pollutant_Concentration_mg_kg      Soil_pH  Temperature_C   Humidity_%  \\\n","count                    3000.000000  3000.000000    3000.000000  3000.000000   \n","mean                      102.745587     6.463747      27.225100    58.222867   \n","std                        55.907366     1.166305      10.084577    21.357711   \n","min                         5.030000     4.500000      10.000000    20.000000   \n","25%                        54.425000     5.457500      18.500000    39.900000   \n","50%                       104.085000     6.450000      27.000000    58.450000   \n","75%                       151.472500     7.490000      35.825000    76.800000   \n","max                       199.990000     8.500000      45.000000    95.000000   \n","\n","       Rainfall_mm  Soil_Organic_Matter_%  \n","count   3000.00000            3000.000000  \n","mean     200.31660               5.175093  \n","std      115.27187               2.761633  \n","min        0.00000               0.500000  \n","25%      100.60000               2.760000  \n","50%      199.00000               5.130000  \n","75%      299.75000               7.550000  \n","max      399.70000              10.000000  \n","\n","Water Pollution Dataset Summary:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3000 entries, 0 to 2999\n","Data columns (total 24 columns):\n"," #   Column                                         Non-Null Count  Dtype  \n","---  ------                                         --------------  -----  \n"," 0   Country                                        3000 non-null   object \n"," 1   Region                                         3000 non-null   object \n"," 2   Year                                           3000 non-null   int64  \n"," 3   Water Source Type                              3000 non-null   object \n"," 4   Contaminant Level (ppm)                        3000 non-null   float64\n"," 5   pH Level                                       3000 non-null   float64\n"," 6   Turbidity (NTU)                                3000 non-null   float64\n"," 7   Dissolved Oxygen (mg/L)                        3000 non-null   float64\n"," 8   Nitrate Level (mg/L)                           3000 non-null   float64\n"," 9   Lead Concentration (µg/L)                      3000 non-null   float64\n"," 10  Bacteria Count (CFU/mL)                        3000 non-null   int64  \n"," 11  Water Treatment Method                         2253 non-null   object \n"," 12  Access to Clean Water (% of Population)        3000 non-null   float64\n"," 13  Diarrheal Cases per 100,000 people             3000 non-null   int64  \n"," 14  Cholera Cases per 100,000 people               3000 non-null   int64  \n"," 15  Typhoid Cases per 100,000 people               3000 non-null   int64  \n"," 16  Infant Mortality Rate (per 1,000 live births)  3000 non-null   float64\n"," 17  GDP per Capita (USD)                           3000 non-null   int64  \n"," 18  Healthcare Access Index (0-100)                3000 non-null   float64\n"," 19  Urbanization Rate (%)                          3000 non-null   float64\n"," 20  Sanitation Coverage (% of Population)          3000 non-null   float64\n"," 21  Rainfall (mm per year)                         3000 non-null   int64  \n"," 22  Temperature (°C)                               3000 non-null   float64\n"," 23  Population Density (people per km²)            3000 non-null   int64  \n","dtypes: float64(12), int64(8), object(4)\n","memory usage: 562.6+ KB\n","None\n","\n","Water Pollution Dataset Descriptive Statistics:\n","              Year  Contaminant Level (ppm)     pH Level  Turbidity (NTU)  \\\n","count  3000.000000              3000.000000  3000.000000      3000.000000   \n","mean   2012.012667                 4.954390     7.255847         2.480023   \n","std       7.229287                 2.860072     0.720464         1.419984   \n","min    2000.000000                 0.000000     6.000000         0.000000   \n","25%    2006.000000                 2.560000     6.630000         1.257500   \n","50%    2012.000000                 4.950000     7.280000         2.460000   \n","75%    2018.000000                 7.400000     7.870000         3.660000   \n","max    2024.000000                10.000000     8.500000         4.990000   \n","\n","       Dissolved Oxygen (mg/L)  Nitrate Level (mg/L)  \\\n","count              3000.000000            3000.00000   \n","mean                  6.492850              25.08025   \n","std                   2.027966              14.50517   \n","min                   3.000000               0.05000   \n","25%                   4.710000              12.52500   \n","50%                   6.490000              24.79000   \n","75%                   8.252500              37.91000   \n","max                  10.000000              49.99000   \n","\n","       Lead Concentration (µg/L)  Bacteria Count (CFU/mL)  \\\n","count                3000.000000              3000.000000   \n","mean                   10.047913              2488.477333   \n","std                     5.798238              1431.421553   \n","min                     0.000000                 0.000000   \n","25%                     5.120000              1268.000000   \n","50%                    10.065000              2469.000000   \n","75%                    15.032500              3736.250000   \n","max                    20.000000              4998.000000   \n","\n","       Access to Clean Water (% of Population)  \\\n","count                              3000.000000   \n","mean                                 64.612333   \n","std                                  20.308463   \n","min                                  30.010000   \n","25%                                  47.027500   \n","50%                                  64.780000   \n","75%                                  82.302500   \n","max                                  99.990000   \n","\n","       Diarrheal Cases per 100,000 people  Cholera Cases per 100,000 people  \\\n","count                         3000.000000                        3000.00000   \n","mean                           249.776667                          24.25100   \n","std                            144.111543                          14.33259   \n","min                              0.000000                           0.00000   \n","25%                            124.000000                          12.00000   \n","50%                            248.000000                          24.00000   \n","75%                            378.000000                          37.00000   \n","max                            499.000000                          49.00000   \n","\n","       Typhoid Cases per 100,000 people  \\\n","count                       3000.000000   \n","mean                          49.270000   \n","std                           28.984165   \n","min                            0.000000   \n","25%                           24.000000   \n","50%                           49.000000   \n","75%                           75.000000   \n","max                           99.000000   \n","\n","       Infant Mortality Rate (per 1,000 live births)  GDP per Capita (USD)  \\\n","count                                    3000.000000           3000.000000   \n","mean                                       50.811900          50036.196667   \n","std                                        28.465323          28598.750508   \n","min                                         2.060000            521.000000   \n","25%                                        26.467500          25010.250000   \n","50%                                        50.230000          49621.500000   \n","75%                                        76.260000          74778.250000   \n","max                                        99.990000          99948.000000   \n","\n","       Healthcare Access Index (0-100)  Urbanization Rate (%)  \\\n","count                      3000.000000            3000.000000   \n","mean                         50.029193              50.062480   \n","std                          28.896676              22.779125   \n","min                           0.190000              10.030000   \n","25%                          24.982500              30.557500   \n","50%                          50.390000              49.795000   \n","75%                          74.817500              69.727500   \n","max                          99.980000              89.980000   \n","\n","       Sanitation Coverage (% of Population)  Rainfall (mm per year)  \\\n","count                            3000.000000             3000.000000   \n","mean                               60.371007             1591.849000   \n","std                                23.159678              817.502434   \n","min                                20.010000              200.000000   \n","25%                                40.440000              865.750000   \n","50%                                60.580000             1572.000000   \n","75%                                80.420000             2308.250000   \n","max                                99.990000             2999.000000   \n","\n","       Temperature (°C)  Population Density (people per km²)  \n","count       3000.000000                          3000.000000  \n","mean          20.130917                           505.390333  \n","std           11.689244                           283.275224  \n","min            0.060000                            10.000000  \n","25%            9.840000                           254.750000  \n","50%           20.175000                           513.000000  \n","75%           30.672500                           745.000000  \n","max           39.990000                           999.000000  \n"]}]},{"cell_type":"markdown","source":["Missing data is a common issue in real-world datasets. For numeric columns, we will fill missing values with the mean of the respective column. For categorical columns, we will fill missing values with the most frequent category (mode).\n","\n","By handling missing data, we ensure that the model can work effectively without being biased by incomplete information.\n"],"metadata":{"id":"nUjZ71p6oVIc"}},{"cell_type":"code","source":["# Function to handle missing data for both numeric and non-numeric columns\n","def handle_missing_data(df):\n","    # Separate numeric and non-numeric columns\n","    numeric_cols = df.select_dtypes(include=[np.number]).columns\n","    non_numeric_cols = df.select_dtypes(exclude=[np.number]).columns\n","\n","    # Handle missing data in numeric columns\n","    missing_data_before = df.isnull().sum()  # Before handling missing data\n","    print(f\"\\nMissing data (before filling):\\n{missing_data_before[missing_data_before > 0]}\")\n","\n","    df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())  # Filling missing numeric columns with mean\n","\n","    # Handle missing data in non-numeric columns (fill with mode)\n","    for col in non_numeric_cols:\n","        df[col] = df[col].fillna(df[col].mode()[0])  # Filling missing categorical columns with mode\n","\n","    missing_data_after = df.isnull().sum()  # After handling missing data\n","    print(f\"\\nMissing data (after filling):\\n{missing_data_after[missing_data_after > 0]}\")\n","\n","    return df\n","\n","# Apply missing data handling to each dataset\n","air_quality_df_filled = handle_missing_data(air_quality_df)\n","soil_pollution_df_filled = handle_missing_data(soil_pollution_df)\n","water_pollution_df_filled = handle_missing_data(water_pollution_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1WA6ST8hldK7","executionInfo":{"status":"ok","timestamp":1756612752042,"user_tz":-330,"elapsed":207,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"68b3be6c-e8c4-4c66-cc34-c87a4234a656"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Missing data (before filling):\n","Series([], dtype: int64)\n","\n","Missing data (after filling):\n","Series([], dtype: int64)\n","\n","Missing data (before filling):\n","Nearby_Industry    582\n","dtype: int64\n","\n","Missing data (after filling):\n","Series([], dtype: int64)\n","\n","Missing data (before filling):\n","Water Treatment Method    747\n","dtype: int64\n","\n","Missing data (after filling):\n","Series([], dtype: int64)\n"]}]},{"cell_type":"markdown","source":["Outliers are data points that differ significantly from other observations. They can skew the results of the analysis and model predictions.\n","\n","In this step, we will identify and remove outliers using the Interquartile Range (IQR) method. This method is effective for detecting extreme values that might distort the analysis.\n"],"metadata":{"id":"cTk1blSSof_3"}},{"cell_type":"code","source":["# Function to detect and remove outliers based on IQR (Interquartile Range)\n","def detect_outliers(df):\n","    # Filter only numeric columns for outlier detection\n","    numeric_df = df.select_dtypes(include=[np.number])\n","\n","    # If no numeric columns, return the original dataframe\n","    if numeric_df.empty:\n","        print(\"No numeric columns found for outlier detection.\")\n","        return df\n","\n","    # Detecting outliers by using the Interquartile Range (IQR) method\n","    Q1 = numeric_df.quantile(0.25)\n","    Q3 = numeric_df.quantile(0.75)\n","    IQR = Q3 - Q1\n","\n","    # Defining the outlier bounds\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","\n","    # Removing outliers: Keep only rows where all numeric columns are within bounds\n","    df_no_outliers = df[~((numeric_df < lower_bound) | (numeric_df > upper_bound)).any(axis=1)]\n","\n","    # Show the number of rows removed (outliers)\n","    print(f\"\\nRows removed due to outliers: {df.shape[0] - df_no_outliers.shape[0]}\")\n","\n","    return df_no_outliers\n","\n","# Apply outlier detection\n","air_quality_df_no_outliers = detect_outliers(air_quality_df_filled)\n","soil_pollution_df_no_outliers = detect_outliers(soil_pollution_df_filled)\n","water_pollution_df_no_outliers = detect_outliers(water_pollution_df_filled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jXPkmUfrmN0R","executionInfo":{"status":"ok","timestamp":1756612754632,"user_tz":-330,"elapsed":81,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"d1bfb314-3d07-4f35-c5e1-5bf58c2c68ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Rows removed due to outliers: 378\n","\n","Rows removed due to outliers: 0\n","\n","Rows removed due to outliers: 0\n"]}]},{"cell_type":"markdown","source":["Feature scaling is crucial when using algorithms that rely on distance-based metrics (like k-Nearest Neighbors or Support Vector Machines), or when features have different units or scales.\n","\n","In this case, we apply **Standard Scaling**, which transforms the features so that they have a mean of 0 and a standard deviation of 1. This ensures that no feature dominates over others due to its scale.\n"],"metadata":{"id":"yNTpMB-Tolur"}},{"cell_type":"code","source":["# Function to scale numeric features\n","def scale_features(df):\n","    # Filter out only numeric columns for scaling\n","    numeric_cols = df.select_dtypes(include=[np.number]).columns\n","\n","    # Before scaling: Show mean and std deviation of numeric columns\n","    mean_before = df[numeric_cols].mean()\n","    std_before = df[numeric_cols].std()\n","\n","    # Apply scaling only to numeric columns\n","    scaler = StandardScaler()\n","    df_scaled = df.copy()\n","    df_scaled[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n","\n","    # After scaling: Show mean and std deviation of numeric columns\n","    mean_after = df_scaled[numeric_cols].mean()\n","    std_after = df_scaled[numeric_cols].std()\n","\n","    # Display mean and standard deviation before and after scaling\n","    print(f\"\\nFeature Scaling:\\nMean before scaling:\\n{mean_before.head()}\\n\")\n","    print(f\"Standard deviation before scaling:\\n{std_before.head()}\\n\")\n","    print(f\"Mean after scaling:\\n{mean_after.head()}\\n\")\n","    print(f\"Standard deviation after scaling:\\n{std_after.head()}\\n\")\n","\n","    return df_scaled\n","\n","# Apply feature scaling\n","air_quality_df_scaled = scale_features(air_quality_df_no_outliers)\n","soil_pollution_df_scaled = scale_features(soil_pollution_df_no_outliers)\n","water_pollution_df_scaled = scale_features(water_pollution_df_no_outliers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ExwpZmommUSD","executionInfo":{"status":"ok","timestamp":1756612757404,"user_tz":-330,"elapsed":101,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"20e35fd5-240b-4e72-b183-18ebf1c2da52"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Feature Scaling:\n","Mean before scaling:\n","Year     2019.701653\n","Month       6.319177\n","Day        15.725303\n","Hour       11.435528\n","PM2.5      48.405285\n","dtype: float64\n","\n","Standard deviation before scaling:\n","Year      1.335045\n","Month     3.572539\n","Day       8.853019\n","Hour      6.924254\n","PM2.5    23.301410\n","dtype: float64\n","\n","Mean after scaling:\n","Year    -4.543156e-14\n","Month    3.809242e-17\n","Day     -5.078990e-17\n","Hour     7.162169e-17\n","PM2.5    2.222058e-17\n","dtype: float64\n","\n","Standard deviation after scaling:\n","Year     1.000014\n","Month    1.000014\n","Day      1.000014\n","Hour     1.000014\n","PM2.5    1.000014\n","dtype: float64\n","\n","\n","Feature Scaling:\n","Mean before scaling:\n","Pollutant_Concentration_mg_kg    102.745587\n","Soil_pH                            6.463747\n","Temperature_C                     27.225100\n","Humidity_%                        58.222867\n","Rainfall_mm                      200.316600\n","dtype: float64\n","\n","Standard deviation before scaling:\n","Pollutant_Concentration_mg_kg     55.907366\n","Soil_pH                            1.166305\n","Temperature_C                     10.084577\n","Humidity_%                        21.357711\n","Rainfall_mm                      115.271870\n","dtype: float64\n","\n","Mean after scaling:\n","Pollutant_Concentration_mg_kg   -1.894781e-17\n","Soil_pH                         -4.488262e-16\n","Temperature_C                   -1.278977e-16\n","Humidity_%                       2.581639e-16\n","Rainfall_mm                      2.960595e-16\n","dtype: float64\n","\n","Standard deviation after scaling:\n","Pollutant_Concentration_mg_kg    1.000167\n","Soil_pH                          1.000167\n","Temperature_C                    1.000167\n","Humidity_%                       1.000167\n","Rainfall_mm                      1.000167\n","dtype: float64\n","\n","\n","Feature Scaling:\n","Mean before scaling:\n","Year                       2012.012667\n","Contaminant Level (ppm)       4.954390\n","pH Level                      7.255847\n","Turbidity (NTU)               2.480023\n","Dissolved Oxygen (mg/L)       6.492850\n","dtype: float64\n","\n","Standard deviation before scaling:\n","Year                       7.229287\n","Contaminant Level (ppm)    2.860072\n","pH Level                   0.720464\n","Turbidity (NTU)            1.419984\n","Dissolved Oxygen (mg/L)    2.027966\n","dtype: float64\n","\n","Mean after scaling:\n","Year                      -1.099210e-14\n","Contaminant Level (ppm)   -2.368476e-17\n","pH Level                  -1.421085e-16\n","Turbidity (NTU)            2.155313e-16\n","Dissolved Oxygen (mg/L)    1.089499e-16\n","dtype: float64\n","\n","Standard deviation after scaling:\n","Year                       1.000167\n","Contaminant Level (ppm)    1.000167\n","pH Level                   1.000167\n","Turbidity (NTU)            1.000167\n","Dissolved Oxygen (mg/L)    1.000167\n","dtype: float64\n","\n"]}]},{"cell_type":"markdown","source":["Machine learning algorithms cannot process non-numeric data directly. Therefore, we need to encode categorical variables into numerical values. We use One-Hot Encoding, which creates binary columns for each category in a feature.\n","\n","For example, the \"Water Treatment Method\" column may have several types of methods, and each method will be converted into its own binary column (1 or 0).\n"],"metadata":{"id":"nRm7Ut2eo5EX"}},{"cell_type":"code","source":["# Function to apply One-Hot Encoding to categorical columns\n","def encode_categorical(df):\n","    df_encoded = pd.get_dummies(df, drop_first=True)\n","    print(f\"\\nEncoded columns (sample values):\\n{df_encoded.head()}\")\n","    return df_encoded\n","\n","# Apply encoding to each dataset\n","air_quality_df_encoded = encode_categorical(air_quality_df_scaled)\n","soil_pollution_df_encoded = encode_categorical(soil_pollution_df_scaled)\n","water_pollution_df_encoded = encode_categorical(water_pollution_df_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VSHtaL2GmZbG","executionInfo":{"status":"ok","timestamp":1756612764264,"user_tz":-330,"elapsed":974,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"ad0a0fa7-30b1-4a08-8276-8a0aae0ac342"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Encoded columns (sample values):\n","      Year     Month       Day      Hour     PM2.5  \\\n","0 -2.02367  1.310242 -0.985588  0.081522  0.691157   \n","1 -2.02367  1.310242 -0.985588  0.225944  0.924623   \n","2 -2.02367  1.310242 -0.985588  0.370366  1.904835   \n","3 -2.02367  1.310242 -0.985588  0.514788  2.628835   \n","4 -2.02367  1.310242 -0.985588  0.659210  2.922384   \n","\n","   Timestamp_2017-11-07 13:00:00  Timestamp_2017-11-07 14:00:00  \\\n","0                          False                          False   \n","1                           True                          False   \n","2                          False                           True   \n","3                          False                          False   \n","4                          False                          False   \n","\n","   Timestamp_2017-11-07 15:00:00  Timestamp_2017-11-07 16:00:00  \\\n","0                          False                          False   \n","1                          False                          False   \n","2                          False                          False   \n","3                           True                          False   \n","4                          False                           True   \n","\n","   Timestamp_2017-11-07 20:00:00  ...  Timestamp_2022-06-04 06:00:00  \\\n","0                          False  ...                          False   \n","1                          False  ...                          False   \n","2                          False  ...                          False   \n","3                          False  ...                          False   \n","4                          False  ...                          False   \n","\n","   Timestamp_2022-06-04 07:00:00  Timestamp_2022-06-04 08:00:00  \\\n","0                          False                          False   \n","1                          False                          False   \n","2                          False                          False   \n","3                          False                          False   \n","4                          False                          False   \n","\n","   Timestamp_2022-06-04 09:00:00  Timestamp_2022-06-04 10:00:00  \\\n","0                          False                          False   \n","1                          False                          False   \n","2                          False                          False   \n","3                          False                          False   \n","4                          False                          False   \n","\n","   Timestamp_2022-06-04 11:00:00  Timestamp_2022-06-04 12:00:00  \\\n","0                          False                          False   \n","1                          False                          False   \n","2                          False                          False   \n","3                          False                          False   \n","4                          False                          False   \n","\n","   Timestamp_2022-06-04 13:00:00  Timestamp_2022-06-04 14:00:00  \\\n","0                          False                          False   \n","1                          False                          False   \n","2                          False                          False   \n","3                          False                          False   \n","4                          False                          False   \n","\n","   Timestamp_2022-06-04 15:00:00  \n","0                          False  \n","1                          False  \n","2                          False  \n","3                          False  \n","4                          False  \n","\n","[5 rows x 35818 columns]\n","\n","Encoded columns (sample values):\n","   Pollutant_Concentration_mg_kg   Soil_pH  Temperature_C  Humidity_%  \\\n","0                      -0.441976  1.574682       0.830605    0.312685   \n","1                      -1.545950  1.283115       0.374386    0.696686   \n","2                       1.155397 -0.955095      -1.073610   -1.143706   \n","3                      -0.241790 -0.689254       0.414058   -1.298242   \n","4                      -0.157708  1.008698      -1.014104    0.017661   \n","\n","   Rainfall_mm  Soil_Organic_Matter_%  Case_ID_CASE_100001  \\\n","0    -1.196646              -1.157151                False   \n","1    -1.666917               1.642384                 True   \n","2    -0.682124               0.114048                False   \n","3    -0.723772              -0.432821                False   \n","4     0.318287              -1.533803                False   \n","\n","   Case_ID_CASE_100002  Case_ID_CASE_100003  Case_ID_CASE_100004  ...  \\\n","0                False                False                False  ...   \n","1                False                False                False  ...   \n","2                 True                False                False  ...   \n","3                False                 True                False  ...   \n","4                False                False                 True  ...   \n","\n","   Age_Group_Affected_Children  Age_Group_Affected_Elderly  \\\n","0                        False                       False   \n","1                        False                        True   \n","2                         True                       False   \n","3                        False                       False   \n","4                         True                       False   \n","\n","   Gender_Most_Affected_Female  Gender_Most_Affected_Male  \\\n","0                        False                       True   \n","1                        False                      False   \n","2                        False                      False   \n","3                        False                       True   \n","4                         True                      False   \n","\n","   Mitigation_Measure_Community Awareness  Mitigation_Measure_Crop Rotation  \\\n","0                                   False                             False   \n","1                                    True                             False   \n","2                                   False                             False   \n","3                                    True                             False   \n","4                                   False                             False   \n","\n","   Mitigation_Measure_Government Regulation  \\\n","0                                      True   \n","1                                     False   \n","2                                     False   \n","3                                     False   \n","4                                      True   \n","\n","   Mitigation_Measure_Soil Remediation  Case_Resolved_Yes  \\\n","0                                False              False   \n","1                                False               True   \n","2                                 True               True   \n","3                                False               True   \n","4                                False               True   \n","\n","   Follow_Up_Required_Yes  \n","0                    True  \n","1                   False  \n","2                   False  \n","3                   False  \n","4                    True  \n","\n","[5 rows x 3787 columns]\n","\n","Encoded columns (sample values):\n","       Year  Contaminant Level (ppm)  pH Level  Turbidity (NTU)  \\\n","0  0.413295                 0.386632 -0.188586         1.021292   \n","1  0.689994                 0.099878  0.810937         1.627034   \n","2  1.381740                -1.648621 -1.146462        -1.190369   \n","3  0.551645                 1.033576 -0.757759        -0.366279   \n","4 -0.970197                -1.690585  1.255170         1.225554   \n","\n","   Dissolved Oxygen (mg/L)  Nitrate Level (mg/L)  Lead Concentration (µg/L)  \\\n","0                -1.091349             -1.158418                  -0.372229   \n","1                -1.298488             -0.644033                   0.799011   \n","2                -1.515490              0.799141                  -0.015165   \n","3                -1.663446              0.816380                  -0.565423   \n","4                 1.310472              1.673458                   0.424697   \n","\n","   Bacteria Count (CFU/mL)  Access to Clean Water (% of Population)  \\\n","0                 0.597773                                -1.527319   \n","1                -0.256066                                 1.227657   \n","2                -0.110732                                -1.444089   \n","3                 0.901717                                -0.348796   \n","4                 1.183303                                -1.379573   \n","\n","   Diarrheal Cases per 100,000 people  ...  Region_North  Region_South  \\\n","0                            1.542280  ...          True         False   \n","1                           -0.886799  ...         False         False   \n","2                            0.168115  ...         False         False   \n","3                           -1.712686  ...         False         False   \n","4                            1.500639  ...         False          True   \n","\n","   Region_West  Water Source Type_Pond  Water Source Type_River  \\\n","0        False                   False                    False   \n","1         True                   False                    False   \n","2        False                    True                    False   \n","3        False                   False                    False   \n","4        False                   False                    False   \n","\n","   Water Source Type_Spring  Water Source Type_Tap  Water Source Type_Well  \\\n","0                     False                  False                   False   \n","1                     False                  False                    True   \n","2                     False                  False                   False   \n","3                     False                  False                    True   \n","4                     False                  False                    True   \n","\n","   Water Treatment Method_Chlorination  Water Treatment Method_Filtration  \n","0                                False                               True  \n","1                                False                              False  \n","2                                False                              False  \n","3                                False                              False  \n","4                                False                               True  \n","\n","[5 rows x 40 columns]\n"]}]},{"cell_type":"markdown","source":["Feature engineering involves creating new features based on the existing ones to improve the model's performance.\n","\n","In this step, we create a new feature that represents the **sum of all numeric columns**. This can provide additional insights or help capture interactions between different pollution levels and environmental factors.\n"],"metadata":{"id":"nyDW3S1do8wC"}},{"cell_type":"code","source":["# Function to create a new feature (sum of numeric columns)\n","def feature_engineering(df):\n","    df['new_feature'] = df.select_dtypes(include=[np.number]).sum(axis=1)\n","    print(f\"\\nNew Feature (sum of numeric columns):\\n{df[['new_feature']].head()}\")\n","    return df\n","\n","# Apply feature engineering to each dataset\n","air_quality_df_fe = feature_engineering(air_quality_df_encoded)\n","soil_pollution_df_fe = feature_engineering(soil_pollution_df_encoded)\n","water_pollution_df_fe = feature_engineering(water_pollution_df_encoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eO6ED1R6melV","executionInfo":{"status":"ok","timestamp":1756612767980,"user_tz":-330,"elapsed":59,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"bc249893-acea-495e-c2cb-a03de41b568e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","New Feature (sum of numeric columns):\n","   new_feature\n","0    -0.926336\n","1    -0.548449\n","2     0.576185\n","3     1.444608\n","4     1.882578\n","\n","New Feature (sum of numeric columns):\n","   new_feature\n","0    -0.077800\n","1     0.783705\n","2    -2.585091\n","3    -2.971822\n","4    -1.360969\n","\n","New Feature (sum of numeric columns):\n","   new_feature\n","0     4.939195\n","1     0.338334\n","2    -0.625476\n","3    -1.854302\n","4     6.271995\n"]}]},{"cell_type":"markdown","source":["To evaluate the model's performance, we split the dataset into **training**, **validation**, and **test** sets.\n","\n","- **Training Set**: Used to train the model.\n","- **Validation Set**: Used to tune hyperparameters and prevent overfitting.\n","- **Test Set**: Used to evaluate the final model's performance.\n","\n","We typically use 60% for training, 20% for validation, and 20% for testing.\n"],"metadata":{"id":"mTPApiJfpFoV"}},{"cell_type":"code","source":["# Function to split the dataset into train, validation, and test sets\n","def split_data(df, dataset_name):\n","    X = df.iloc[:, :-1]  # Features (all except target column)\n","    y = df.iloc[:, -1]   # Target column\n","\n","    # Split into 60% train, 20% validation, 20% test\n","    X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, random_state=42)  # 60% train, 40% temp\n","    X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)  # 50% val, 50% test from temp\n","\n","    # Combine X and y back to form the final datasets\n","    train_df = pd.concat([X_train, y_train], axis=1)\n","    val_df = pd.concat([X_val, y_val], axis=1)\n","    test_df = pd.concat([X_test, y_test], axis=1)\n","\n","    # Create the output folders if they don't exist\n","    os.makedirs(os.path.join(output_folder_path, f'{dataset_name}/train'), exist_ok=True)\n","    os.makedirs(os.path.join(output_folder_path, f'{dataset_name}/val'), exist_ok=True)\n","    os.makedirs(os.path.join(output_folder_path, f'{dataset_name}/test'), exist_ok=True)\n","\n","    # Save the datasets as CSV files\n","    train_df.to_csv(os.path.join(output_folder_path, f'{dataset_name}/train/{dataset_name}_train.csv'), index=False)\n","    val_df.to_csv(os.path.join(output_folder_path, f'{dataset_name}/val/{dataset_name}_val.csv'), index=False)\n","    test_df.to_csv(os.path.join(output_folder_path, f'{dataset_name}/test/{dataset_name}_test.csv'), index=False)\n","\n","    print(f\"Train, Validation, and Test splits for {dataset_name} have been saved.\")\n","\n","# Apply splitting for each dataset\n","split_data(air_quality_df_fe, 'air_quality')\n","split_data(soil_pollution_df_fe, 'soil_pollution')\n","split_data(water_pollution_df_fe, 'water_pollution')"],"metadata":{"id":"VENmB7H4ml_I","colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"status":"error","timestamp":1756636541104,"user_tz":-330,"elapsed":15,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"bcf6fee9-e6d3-46bd-bc91-32c2a1a70a6e"},"execution_count":9,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'air_quality_df_fe' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3155632919.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# Apply splitting for each dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0msplit_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mair_quality_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'air_quality'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0msplit_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msoil_pollution_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'soil_pollution'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0msplit_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwater_pollution_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'water_pollution'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'air_quality_df_fe' is not defined"]}]},{"cell_type":"markdown","source":["In this step, we train a **Random Forest** classifier on the training data and evaluate its performance on the test data.\n","\n","We will calculate the **accuracy** of the model to understand how well it performs in classifying the pollution levels. Accuracy is the percentage of correctly predicted instances.\n","\n","Let's evaluate the results and see how well the model performs across the different datasets.\n"],"metadata":{"id":"ARoD_FYqpMXO"}},{"cell_type":"code","source":["\n","# Apply the splitting for each dataset (Air Quality, Soil Pollution, Water Pollution)\n","X_train_air, X_test_air, y_train_air, y_test_air = split_data(air_quality_df_scaled)\n","X_train_soil, X_test_soil, y_train_soil, y_test_soil = split_data(soil_pollution_df_scaled)\n","X_train_water, X_test_water, y_train_water, y_test_water = split_data(water_pollution_df_scaled)\n","\n","# ----------------------------- 7. Model Training and Accuracy -----------------------------\n","def train_model(X_train, X_test, y_train, y_test, dataset_name):\n","    # Train a Random Forest model\n","    model = RandomForestClassifier(n_estimators=100, random_state=42)\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","\n","    # Evaluate accuracy\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(f\"\\nModel Accuracy on {dataset_name}: {accuracy * 100:.2f}%\")\n","\n","    return dataset_name, accuracy\n","\n","# Collect results\n","results = []\n","results.append(train_model(X_train_air, X_test_air, y_train_air, y_test_air, \"Air Quality\"))\n","results.append(train_model(X_train_soil, X_test_soil, y_train_soil, y_test_soil, \"Soil Pollution\"))\n","results.append(train_model(X_train_water, X_test_water, y_train_water, y_test_water, \"Water Pollution\"))\n","\n","# ----------------------------- 8. Results Table -----------------------------\n","import pandas as pd\n","\n","results_df = pd.DataFrame(results, columns=[\"Dataset\", \"Accuracy\"])\n","print(\"\\nFinal Accuracy Results:\")\n","print(results_df)"],"metadata":{"id":"RV2LsMLgmqAG","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"error","timestamp":1756636298604,"user_tz":-330,"elapsed":5047,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"6f474221-ded3-48b8-dca3-bfb50f7590c4"},"execution_count":2,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'air_quality.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2477066451.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# ----------------------------- 1. Load Your Datasets -----------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Replace these with your actual data loading paths\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mair_quality_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"air_quality.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0msoil_pollution_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"soil_pollution.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mwater_pollution_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"water_pollution.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'air_quality.csv'"]}]},{"cell_type":"markdown","source":["Random Forest models provide valuable insights into which features are most important for making predictions. By visualizing feature importance, we can understand which factors (e.g., PM2.5, nitrogen levels, or wind speed) have the most influence on pollution predictions.\n","\n","This can help guide further feature engineering or model improvement.\n"],"metadata":{"id":"9Mey4BcPpS7v"}},{"cell_type":"code","source":["# Plot feature importance for Random Forest model\n","def plot_feature_importance(model, X_train):\n","    importance = model.feature_importances_\n","    feature_names = X_train.columns\n","    df_importance = pd.DataFrame({'Feature': feature_names, 'Importance': importance})\n","    df_importance = df_importance.sort_values(by='Importance', ascending=False)\n","\n","    plt.figure(figsize=(10, 6))\n","    sns.barplot(x='Importance', y='Feature', data=df_importance)\n","    plt.title(\"Feature Importance\")\n","    plt.show()\n","\n","# Visualize feature importance for Air Quality dataset\n","model_air_quality = RandomForestClassifier(n_estimators=100, random_state=42)\n","model_air_quality.fit(X_train_air, y_train_air)\n","plot_feature_importance(model_air_quality, X_train_air)\n"],"metadata":{"id":"ZgMklPWfmtsO","colab":{"base_uri":"https://localhost:8080/","height":193},"executionInfo":{"status":"error","timestamp":1756636578903,"user_tz":-330,"elapsed":70,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"448adfa6-bbce-457e-978a-84f081aae378"},"execution_count":10,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_train_air' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1572141682.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Visualize feature importance for Air Quality dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mmodel_air_quality\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mmodel_air_quality\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_air\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_air\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mplot_feature_importance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_air_quality\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_train_air\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_train_air' is not defined"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from google.colab import files\n","import pandas as pd\n","\n","# Example: If your feature-engineered DataFrames are not yet created,\n","# make sure you define them first. Replace this with your actual data.\n","# air_quality_df_fe = air_quality_df.copy()\n","# soil_pollution_df_fe = soil_pollution_df.copy()\n","# water_pollution_df_fe = water_pollution_df.copy()\n","\n","# Function to split and save data\n","def split_and_download(dataframe, name):\n","    # Split into train (80%) and test (20%)\n","    train_df, test_df = train_test_split(dataframe, test_size=0.2, random_state=42)\n","\n","    # Save as CSV\n","    train_file = f'{name}_train.csv'\n","    test_file = f'{name}_test.csv'\n","    train_df.to_csv(train_file, index=False)\n","    test_df.to_csv(test_file, index=False)\n","\n","    # Download the files\n","    files.download(train_file)\n","    files.download(test_file)\n","    print(f\"{name}: Train and test files downloaded.\")\n","\n","# Run for all three datasets\n","split_and_download(air_quality_df_fe, 'air_quality')\n","split_and_download(soil_pollution_df_fe, 'soil_pollution')\n","split_and_download(water_pollution_df_fe, 'water_pollution')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"Xv36ZNHgs5aP","executionInfo":{"status":"error","timestamp":1756636619651,"user_tz":-330,"elapsed":20,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"7cce2c26-91dc-4096-a15f-5debe99a5bab"},"execution_count":11,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'air_quality_df_fe' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3531571348.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# Run for all three datasets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0msplit_and_download\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mair_quality_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'air_quality'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0msplit_and_download\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msoil_pollution_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'soil_pollution'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0msplit_and_download\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwater_pollution_df_fe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'water_pollution'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'air_quality_df_fe' is not defined"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Create dummy DataFrames for testing\n","air_quality_df_fe = pd.DataFrame({'A': np.random.rand(10), 'B': np.random.rand(10)})\n","soil_pollution_df_fe = pd.DataFrame({'A': np.random.rand(10), 'B': np.random.rand(10)})\n","water_pollution_df_fe = pd.DataFrame({'A': np.random.rand(10), 'B': np.random.rand(10)})\n","\n","# Then run the split-and-download function\n"],"metadata":{"id":"oGHmVsV2tB7b","executionInfo":{"status":"ok","timestamp":1756636655277,"user_tz":-330,"elapsed":10,"user":{"displayName":"Project","userId":"07806334266332209085"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["In this notebook, we explored, preprocessed, and trained models on pollution datasets. We handled missing values, removed outliers, scaled features, and applied One-Hot Encoding. After training the models, we evaluated their performance and visualized feature importance.\n","\n","### Next Steps:\n","- **Hyperparameter Tuning**: We could tune the hyperparameters of the Random Forest model to improve performance.\n","- **Try Other Models**: Explore other models such as Support Vector Machines, k-NN, or Neural Networks.\n","- **Model Interpretability**: Consider using SHAP or LIME for better interpretability of model predictions.\n","\n","This is just the beginning of understanding pollution data, and there are many directions we can explore next!\n"],"metadata":{"id":"eTZvph6hpYRr"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from google.colab import files\n","\n","# Function to split and download\n","def split_and_download(dataframe, name):\n","    # Split 80-20\n","    train_df, test_df = train_test_split(dataframe, test_size=0.2, random_state=42)\n","\n","    # Save to CSV\n","    train_file = f'{name}_train.csv'\n","    test_file = f'{name}_test.csv'\n","    train_df.to_csv(train_file, index=False)\n","    test_df.to_csv(test_file, index=False)\n","\n","    # Download files\n","    files.download(train_file)\n","    files.download(test_file)\n","    print(f\"{name}: Train and test CSV files downloaded.\")\n","\n","# Run for dummy datasets\n","split_and_download(air_quality_df_fe, 'air_quality')\n","split_and_download(soil_pollution_df_fe, 'soil_pollution')\n","split_and_download(water_pollution_df_fe, 'water_pollution')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":69},"id":"-yj7uXjqtMQT","executionInfo":{"status":"ok","timestamp":1756636698262,"user_tz":-330,"elapsed":82,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"80271828-3cb5-4990-8c9e-01d4a0307785"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_70fa9938-6191-4822-b65c-a81e24330f9c\", \"air_quality_train.csv\", 308)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_c29c4ff7-6228-424b-bb8d-7c0b92afa8b7\", \"air_quality_test.csv\", 82)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["air_quality: Train and test CSV files downloaded.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_2a5b47f5-e57d-49b6-b230-fbe4443347a4\", \"soil_pollution_train.csv\", 314)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_ae4a35ed-312e-4137-bddd-792be001677a\", \"soil_pollution_test.csv\", 82)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["soil_pollution: Train and test CSV files downloaded.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_d99bc1e8-01e8-4062-88d0-ccf4e96f2241\", \"water_pollution_train.csv\", 315)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_02e27995-1c0e-4c42-81cd-a1f8fcb53e4a\", \"water_pollution_test.csv\", 81)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["water_pollution: Train and test CSV files downloaded.\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Create a fake target column with 0/1 values\n","air_quality_df_fe['target'] = np.random.randint(0, 2, size=len(air_quality_df_fe))\n","\n","# Now you can split features and target\n","X = air_quality_df_fe.drop('target', axis=1)\n","y = air_quality_df_fe['target']\n"],"metadata":{"id":"bgXErvSlu3jm","executionInfo":{"status":"ok","timestamp":1756637162168,"user_tz":-330,"elapsed":10,"user":{"displayName":"Project","userId":"07806334266332209085"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","import numpy as np\n","import joblib\n","from google.colab import files\n","\n","# --- Step 1: Check if target exists, otherwise create a dummy one ---\n","if 'target' not in air_quality_df_fe.columns:\n","    air_quality_df_fe['target'] = np.random.randint(0, 2, size=len(air_quality_df_fe))\n","\n","# --- Step 2: Split features and target ---\n","X = air_quality_df_fe.drop('target', axis=1)\n","y = air_quality_df_fe['target']\n","\n","# --- Step 3: Train-test split ---\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# --- Step 4: Train the model ---\n","model = RandomForestClassifier()\n","model.fit(X_train, y_train)\n","\n","# --- Step 5: Save the model to file ---\n","model_filename = 'air_quality_model.pkl'\n","joblib.dump(model, model_filename)\n","\n","# --- Step 6: Download the trained model ---\n","files.download(model_filename)\n","print(\"Model trained and downloaded successfully!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"PNLVLM4HvDaS","executionInfo":{"status":"ok","timestamp":1756637184740,"user_tz":-330,"elapsed":123,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"29387d18-0eea-4c2e-dd6e-ba69bbee2c74"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_be0dbb6e-bc2d-4b12-8978-09de7df8cd14\", \"air_quality_model.pkl\", 74521)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Model trained and downloaded successfully!\n"]}]},{"cell_type":"code","source":["files.download(model_filename)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"XBg6_h3XvKoH","executionInfo":{"status":"ok","timestamp":1756637295364,"user_tz":-330,"elapsed":16,"user":{"displayName":"Project","userId":"07806334266332209085"}},"outputId":"6394cf4e-c564-4022-8f99-7130e0ea85f6"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_745fe07e-bb76-4921-821c-f04c65053c57\", \"air_quality_model.pkl\", 74521)"]},"metadata":{}}]}]}